// Code generated by MockGen. DO NOT EDIT.
// Source: database.go

// Package mock_main is a generated GoMock package.
package mock_main

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	opt "github.com/syndtr/goleveldb/leveldb/opt"
)

// MockURLDatabase is a mock of URLDatabase interface.
type MockURLDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockURLDatabaseMockRecorder
}

// MockURLDatabaseMockRecorder is the mock recorder for MockURLDatabase.
type MockURLDatabaseMockRecorder struct {
	mock *MockURLDatabase
}

// NewMockURLDatabase creates a new mock instance.
func NewMockURLDatabase(ctrl *gomock.Controller) *MockURLDatabase {
	mock := &MockURLDatabase{ctrl: ctrl}
	mock.recorder = &MockURLDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLDatabase) EXPECT() *MockURLDatabaseMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockURLDatabase) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockURLDatabaseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockURLDatabase)(nil).Close))
}

// Delete mocks base method.
func (m *MockURLDatabase) Delete(key []byte, wo *opt.WriteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key, wo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockURLDatabaseMockRecorder) Delete(key, wo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockURLDatabase)(nil).Delete), key, wo)
}

// Get mocks base method.
func (m *MockURLDatabase) Get(key []byte, ro *opt.ReadOptions) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key, ro)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockURLDatabaseMockRecorder) Get(key, ro interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockURLDatabase)(nil).Get), key, ro)
}

// Has mocks base method.
func (m *MockURLDatabase) Has(key []byte, ro *opt.ReadOptions) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", key, ro)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockURLDatabaseMockRecorder) Has(key, ro interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockURLDatabase)(nil).Has), key, ro)
}

// Put mocks base method.
func (m *MockURLDatabase) Put(key, value []byte, wo *opt.WriteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value, wo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockURLDatabaseMockRecorder) Put(key, value, wo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockURLDatabase)(nil).Put), key, value, wo)
}
